/// Les positions de vote (pour, contre ou abstention) de chaque député pour les `scrutins solennels <https://www.vie-publique.fr/fiches/19498-comment-votent-les-parlementaires>`__, les déclarations du Gouvernement, les motions de procédure et les autres scrutins publics.
model Scrutin {
  /// Identifiant unique.
  uid                     String            @id
  dateMaj                 DateTime          @default(now()) @updatedAt
  /// Jeu de données de provenance (numéro de législature)
  dataset                 Int
  /// Chambre parente du document (Assemblée ou Sénat)
  chambre                 String
  /// Date à laquelle le vote a eu lieu.
  dateScrutin             DateTime?         @db.Date
  /// L'acteur ou l'organe qui demande le vote.
  demandeur               String?
  /// Numéro de la législature.
  legislature             String?
  /// Mode de publication des votes.
  modePublicationDesVotes String?
  /// Numéro unique du vote, relativement à la législature, débutant par 1 et par incrément de 1. On le retrouve aussi à la fin de l'identifiant unique du vote (uid).
  numero                  String?
  /// Objet du vote, toujours identique au champ titre.
  objet                   String?
  /// L'identifiant unique (uid) de l'organe au sein duquel se déroule le vote. Il s'agit toujours de l'Assemblée Nationale mais son uid varie en fonction de la législature.
  organeRefUid            String?
  /// Numéro de la séance dans la journée.
  quantiemeJourSeance     String?
  /// Identifiant unique (uid) de l'entrée de l'agenda correspondant au moment où le vote a lieu.
  seanceRefUid            String?
  /// Résultat du vote (adopté ou non).
  code                    String?
  /// Libellé complet du résultat du vote (adopté ou non).
  libelle                 String?
  /// Annonce du résultat du vote (adopté ou non).
  annonce                 String?
  /// Nombre total d'abstentions.
  abstentions             Int               @default(0)
  /// Nombre total de votes contre.
  contre                  Int               @default(0)
  /// Nombre total de non votants
  nonVotants              Int               @default(0)
  /// Nombre total de non votants volontaires.
  nonVotantsVolontaires   Int               @default(0)
  /// Nombre total de votes pour.
  pour                    Int               @default(0)
  /// Nombre de suffrages requis.
  nbrSuffragesRequis      Int               @default(0)
  /// Nombre de votants, c'est à dire de sièges occupés dans l'hémicycle.
  nombreVotants           Int               @default(0)
  /// Nombre de suffrages exprimés.
  suffragesExprimes       Int               @default(0)
  /// Objet du vote.
  titre                   String?
  /// Type de vote: MOC pour motion de censure, SAT pour scrutin à la tribune, SPO pour scrutin public ordinaire et SPS pour scrutin public solennel.
  codeTypeVote            String?
  /// Libellé complet du type de vote.
  libelleTypeVote         String?
  /// La signification de ce champ n'est pas définie.
  typeMajorite            String?
  /// Type de l'objet (e.g. amendement, article).
  typeObjet               TypeObjetScrutin?
  /// Numéro de l'objet (e.g. 1, 2, 3, etc.).
  numeroTypeObjet         Int?
  /// Identifiant de l'acte législatif associé au scrutin.
  acteLegislatifRefUid    String?
  /// Identifiant unique du dossier législatif dont ce scrutin appartient.
  dossierRefUid           String?
  /// Identifiant unique du point d'ordre du jour associé.
  pointOdjRefUid          String?
  /// Identifiant unique d'un amendement lié à ce scrutin.
  amendementRefUid        String?
  /// Identifiant de l'article associé
  articleRefUid           String?
  /// Identifiant du document associé au scrutin
  documentRefUid          String?

  vecteurRecherche      Unsupported("tsvector")? @default(dbgenerated("to_tsvector('french'::regconfig, immutable_unaccent((COALESCE(titre, ''::text))::character varying))"))
  /// Dossier législatif lié au scrutin.
  dossierRef            Dossier?                 @relation(fields: [dossierRefUid], references: [uid])
  documentRef           Document?                @relation(fields: [documentRefUid], references: [uid])
  pointOdjRef           PointOdj?                @relation(fields: [pointOdjRefUid], references: [uid])
  amendementRef         Amendement?
  articleRef            Subdivision?             @relation(fields: [articleRefUid], references: [hash])
  acteLegislatifRef     ActeLegislatif?          @relation(fields: [acteLegislatifRefUid], references: [uid])
  agendaRef             Agenda?                  @relation(fields: [seanceRefUid], references: [uid])
  organeRef             Organe?                  @relation(fields: [organeRefUid], references: [uid], onDelete: Cascade)
  dysfonctionnements    Dysfonctionnement[]
  groupesVotants        GroupeVotant[]
  misesAuPoint          MiseAuPoint[]
  votes                 Vote[]
  votesActesLegislatifs VoteActeLegislatif[]

  @@index([dataset])
  @@index([organeRefUid])
  @@index([seanceRefUid])
  @@index([pointOdjRefUid])
  @@index([acteLegislatifRefUid])
  @@index([articleRefUid])
  @@index([documentRefUid])
  @@index([dossierRefUid])
  @@index([dateScrutin])
}

/// Énumération du type de l'objet.
enum TypeObjetScrutin {
  /// L'objet concerne un amendement.
  amendement
  /// L'objet concerne un article.
  article
  /// L'objet concerne une motion de censure.
  motionCensure
  /// L'objet concerne une motion referendaire.
  motionReferendaire
  /// L'objet concerne une motion de rejet.
  motionRejet
  /// L'objet concerne un projet de loi.
  projetLoi
  /// L'objet concerne une proposition de loi.
  propositionLoi
  /// L'objet concerne une proposition de résolution.
  propositionResolution
  /// L'objet concerne un sous-amendement.
  sousAmendement
}

model GroupeVotant {
  /// Identifiant unique.
  id                    Int           @id @default(autoincrement())
  dateMaj               DateTime      @default(now()) @updatedAt
  /// Jeu de données de provenance (numéro de législature)
  dataset               Int
  /// Hachage de l'objet
  hash                  String        @unique
  /// Le nombre total de membres du groupe politique et non pas le nombre de membres présents au moment du vote.
  nombreMembresGroupe   Int           @default(0)
  /// Liste des acteurs s'étant abstenus.
  abstentions           Int           @default(0)
  /// Liste des acteurs ayant voté contre.
  contre                Int           @default(0)
  /// Liste des acteurs ne pouvant participer à ce vote en raison de leur position (Président de séance etc.).
  nonVotants            Int           @default(0)
  /// Nombre total de non votants volontaires.
  nonVotantsVolontaires Int           @default(0)
  /// Liste des acteurs ayant voté pour.
  pour                  Int           @default(0)
  /// La position majoritaire du groupe politique est celle pour laquelle le plus grand nombre de membres ont voté. Si le nombre de pour est égale au nombre de contre, c'est le pour qui l'emporte. A moins que le nombre d'abstentions soit supérieur ou égal au nombre de pour, dans ce cas c'est l'abstention qui l'emporte.
  positionMajoritaire   PositionVote?

  /// Identifiant unique (uid) de l'organe correspondant au groupe politique.
  organeRefUid  String?
  scrutinRefUid String?
  organeRef     Organe?  @relation(fields: [organeRefUid], references: [uid], onDelete: Cascade)
  scrutinRef    Scrutin? @relation(fields: [scrutinRefUid], references: [uid])
  votes         Vote[]

  @@index([dataset])
  @@index([organeRefUid])
  @@index([scrutinRefUid])
}

enum PositionVote {
  pour
  contre
  nonVotant
  abstention
}

model Vote {
  /// Identifiant unique.
  id                Int           @id @default(autoincrement())
  dateMaj           DateTime      @default(now()) @updatedAt
  /// Jeu de données de provenance (numéro de législature)
  dataset           Int
  /// Identifiant unique (uid) de l'acteur.
  acteurRefUid      String
  positionVote      PositionVote?
  /// Raison pour laquelle un acteur n'as pas voté malgré sa présence. MG pour membre du gouvernement, PAN pour président de l'Assemblée nationale, PSE pour président de séance.
  causePositionVote String?
  /// Identifiant unique (uid) du mandat qui donne à l'acteur le droit de vote.
  mandatRefUid      String?
  /// 'true' si l'acteur a délégué son vote à un autre acteur, 'false' sinon.
  parDelegation     Boolean?
  groupeVotantRefId String?
  scrutinRefUid     String?
  dateVote          String?
  codeTypeVote      String?

  acteurRef       Acteur        @relation(fields: [acteurRefUid], references: [uid])
  groupeVotantRef GroupeVotant? @relation(fields: [groupeVotantRefId], references: [hash], onDelete: Cascade)
  mandatRef       Mandat?       @relation(fields: [mandatRefUid], references: [uid])
  scrutinRef      Scrutin?      @relation(fields: [scrutinRefUid], references: [uid])

  @@index([dataset])
  @@index([acteurRefUid])
  @@index([groupeVotantRefId])
  @@index([mandatRefUid])
  @@index([scrutinRefUid])
}

model MiseAuPoint {
  /// Identifiant unique.
  id            Int      @id @default(autoincrement())
  dateMaj       DateTime @default(now()) @updatedAt
  /// Jeu de données de provenance (numéro de législature)
  dataset       Int
  acteurRefUid  String?
  position      String?
  scrutinRefUid String?
  acteurRef     Acteur?  @relation(fields: [acteurRefUid], references: [uid], onDelete: Cascade)
  scrutinRef    Scrutin? @relation(fields: [scrutinRefUid], references: [uid])

  @@index([dataset])
  @@index([acteurRefUid])
  @@index([scrutinRefUid])
}

model Dysfonctionnement {
  /// Identifiant unique.
  id            Int      @id @default(autoincrement())
  dateMaj       DateTime @default(now()) @updatedAt
  /// Jeu de données de provenance (numéro de législature)
  dataset       Int
  acteurRefUid  String?
  position      String?
  scrutinRefUid String?
  acteurRef     Acteur?  @relation(fields: [acteurRefUid], references: [uid], onDelete: Cascade)
  scrutinRef    Scrutin? @relation(fields: [scrutinRefUid], references: [uid])

  @@index([dataset])
  @@index([acteurRefUid])
  @@index([scrutinRefUid])
}
