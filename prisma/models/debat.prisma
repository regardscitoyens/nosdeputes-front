/// Compte rendu des débats en séance.
model Debat {
  /// Identifiant unique.
  uid               String    @id
  /// Jeu de données de provenance (numéro de législature)
  dataset           Int
  /// Chambre de provenance (AN, SN ou CG)
  chambre           String?
  typeAssemblee     String
  legislature       String
  reunionRefUid     String?
  sessionRef        String
  dateSeance        DateTime?
  dateSeanceJour    String
  numSeance         String
  numSeanceJour     String
  diffusion         String
  environnement     String
  etat              String
  version           String
  heureGeneration   DateTime
  nomFichierJo      String
  session           String
  validite          String
  quantiemesJournee String
  quantiemesSession String
  presidentSeance   String?

  reunions    Agenda[]
  paragraphes Paragraphe[]
  sommaires   SommaireDebat[]

  @@index([dataset])
  @@index([reunionRefUid])
  @@index([dateSeance])
}

/// Sommaire d'une séance de débat.
model SommaireDebat {
  id                String  @id
  /// Jeu de données de provenance (numéro de législature)
  dataset           Int
  debatRefUid       String
  valeurPtsOdj      String
  typeDebat         String
  titreIntitule     String?
  titreSousIntitule String?
  idSyceron         String
  debatRef          Debat   @relation(fields: [debatRefUid], references: [uid])

  @@index([dataset])
  @@index([debatRefUid])
}

model Paragraphe {
  id                Int                      @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset           Int
  /// Chambre de provenance (AN, SN ou CG)
  chambre           String?
  dateSeance        DateTime?
  adt               String?
  art               String?
  bibard            String?
  codeGrammaire     String?
  codeParole        String?
  codeStyle         String?
  decision          String?
  acteurRefUid      String?
  mandatRefUid      String?
  idNominationOe    String?
  idNominationOp    String?
  idPreparation     String?
  idSyceron         String?
  nivPoint          String?
  orateur           String?
  ordinalPrise      Int?
  ordreAbsoluSeance Int?
  roleDebat         String?
  sommaire          String?
  ssadt             String?
  structure         String?
  typeDebat         String?
  valeur            String?
  valeurPtsOdj      String?
  texte             String?
  stime             String?
  debatRefUid       String
  dossierRefUid     String?
  texteRefUid       String?
  pointOdjRefUid    String?
  vecteurRecherche  Unsupported("tsvector")? @default(dbgenerated("to_tsvector('french'::regconfig, immutable_unaccent((COALESCE(texte, ''::text))::character varying))"))
  acteurRef         Acteur?                  @relation(fields: [acteurRefUid], references: [uid])
  mandatRef         Mandat?                  @relation(fields: [mandatRefUid], references: [uid])
  debatRef          Debat                    @relation(fields: [debatRefUid], references: [uid])
  dossierRef        Dossier?                 @relation(fields: [dossierRefUid], references: [uid])
  texteRef          Document?                @relation(fields: [texteRefUid], references: [uid])
  pointOdjRef       PointOdj?                @relation(fields: [pointOdjRefUid], references: [uid])

  @@index([dataset])
  @@index([vecteurRecherche], type: Gin)
  @@index([debatRefUid])
  @@index([acteurRefUid])
  @@index([mandatRefUid])
  @@index([dossierRefUid])
  @@index([texteRefUid])
  @@index([pointOdjRefUid])
  @@index([dateSeance])
}
