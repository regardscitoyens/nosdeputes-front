/// Un dossier législatif comprend l'ensemble des travaux parlementaires relatifs à un texte depuis son dépôt - par le gouvernement (projet de loi), ou par un parlementaire (proposition de loi) - jusqu'à sa promulgation.
model Dossier {
  /// Identifiant unique.
  uid                    String    @id
  /// Jeu de données de provenance (numéro de législature)
  dataset                Int
  /// Chambre parente du document (AN, SN, ou CG)
  chambre                String?
  /// Numéro du dossier
  numero                 String?
  /// Type du dossier
  xsiType                String?
  /// Numéro de la législature.
  legislature            String
  /// Date de dépôt du texte
  dateDepot              DateTime?
  /// Date du dernier acte législatif lié au texte
  dateDernierActe        DateTime?
  /// Code du dernier acte législatif
  codeDernierActe        String?
  /// URL du dossier législatif sur le site du Sénat.
  senatChemin            String?
  /// Titre du dossier législatif.
  titre                  String?
  /// Chemin permettant de construire l'URL du dossier législatif sur le site de l'Assemblée nationale: http://www.assemblee-nationale.fr/dyn/**legislature**/dossiers/**titreChemin**
  titreChemin            String?
  /// Mots clés.
  theme                  String?
  /// Code unique pour traitement automatisé.
  codeProcedure          String
  /// Signification du code.
  libelleProcedure       String
  /// Dernier statut de ce dossier parlementaire (e.g. Texte déposé à l’Assemblée nationale).
  statut                 String?
  /// Initiative du dossier législatif
  /// (e.g. Proposition de loi, Mission d'information, Motion de censure).
  typeInitiative         String    @default("")
  /// Procédure du dossier législatif
  /// (e.g. Finances de l'année, Sans mission).
  typeProcedure          String    @default("")
  /// Le dossier parlementaire est lié à un autre. Si la cause est un 'Examen commun', les deux dossiers continuent d'évoluer indépendament. Par exemple une mission d'information peut être liée au dossier parlementaire qui représente le rapport produit par cette mission. Si la cause est 'Dossier absorbé', il devient obsolete et le dossier absorbant prend la suite. Par exemple, lorsqu'une loi ordinaire devient une loi organique, un nouveau dossier parlementaire est constitué, l'intégralité du dossier absorbé est copié dans le nouveau dossier.
  causeFusionDossier     String?
  /// Identifiant unique (uid) du dossier parlementaire absorbant.
  dossierAbsorbantRefUid String?   @unique
  /// Organe à l'initiative du dossier.
  organeRefUid           String?
  /// Identifiant de la commission référente
  commissionRefUid       String?
  /// Identifiant unique (uid) de l'acteur.
  acteurPrincipalRefUid  String?

  vecteurRecherche    Unsupported("tsvector")? @default(dbgenerated("to_tsvector('french'::regconfig, ((immutable_unaccent((COALESCE(titre, ''::text))::character varying) || ' '::text) || immutable_unaccent((COALESCE(numero, ''::text))::character varying)))"))
  /// Référence vers l'acteur principal.
  acteurPrincipalRef  Acteur?                  @relation(fields: [acteurPrincipalRefUid], references: [uid])
  dossierAbsorbantRef Dossier?                 @relation("DossierAbsorbant", fields: [dossierAbsorbantRefUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)
  dossierAbsorbrant   Dossier?                 @relation("DossierAbsorbant")
  organeRef           Organe?                  @relation("OrganeMission", fields: [organeRefUid], references: [uid])
  commissionRef       Organe?                  @relation("OrganeCommission", fields: [commissionRefUid], references: [uid])
  plf                 EtudePlf[]
  initiateurs         InitiateurDossier[]
  actesLegislatifs    ActeLegislatif[]
  amendements         Amendement[]
  documents           Document[]
  pointsOdj           PointOdj[]
  paragraphes         Paragraphe[]
  // themes
  themes              DossierThemes[]

  /// Tous les scrutins d'un Dossier.
  scrutins Scrutin[]

  @@index([dataset])
  @@index([vecteurRecherche], type: Gin)
  @@index([organeRefUid])
  @@index([commissionRefUid])
  @@index([dossierAbsorbantRefUid])
  @@index([acteurPrincipalRefUid])
  @@index([dateDepot])
  @@index([dateDernierActe])
}

model ActeLegislatif {
  /// Identifiant unique.
  uid                                 String                     @id
  /// Jeu de données de provenance (numéro de législature)
  dataset                             Int
  /// Chambre parente du document (AN, SN, ou CG)
  chambre                             String?
  /// Identifiant de l'acte législatif parent.
  parentUid                           String?
  /// Code de l'acte législatif dont la valeur dépend de sa place dans la hiérarchie.
  codeActe                            String
  /// Nom de l'acte législatif.
  nomCanonique                        String?
  /// Equivalent du nomCanonique mais plus court.
  libelleCourtActe                    String?
  /// Type d'acte législatif.
  xsiType                             String
  /// Date à laquelle l'acte a débuté.
  dateActe                            DateTime?
  /// Organe référent.
  organeRefUid                        String?
  /// Organe de provenance.
  organeProvenanceRefUid              String?
  /// Code unique pour traitement automatisé de la conclusion de l'acte.
  famCodeStatutConclusion             String?
  /// Signification du code.de la conclusion de l'acte.
  libelleStatutConclusion             String?
  /// Code unique pour traitement automatisé de la saisine.
  famCodeCasSaisine                   String?
  /// Signification du code.de la saisine.
  libelleCasSaisine                   String?
  /// Année de la décision du conseil constitutionnel (2018, 2019, ...).
  anneeDecisionConseilConstitutionnel String?
  /// URL contenant le texte de la décision, sur http://www.conseil-constitutionnel.fr/.
  urlConclusionConseilConstitutionnel String?
  /// Motif Conseil Constitutionnel
  motifConseilConstitutionnel         String?
  /// Numéro de la décision du conseil constitutionnel.
  numDecisionConseilConstitutionnel   String?
  /// Identifiant unique (uid) de l'acteur auteur de la motion.
  auteurMotionRefUid                  String?
  /// Code unique pour traitement automatisé du type de motion.
  famCodeTypeMotion                   String?
  /// Signification du code du type de motion.
  libelleTypeMotion                   String?
  /// Code unique pour traitement automatisé du type de motion de censure.
  famCodeTypeMotionCensure            String?
  /// Signification du code du type de motion de censure.
  libelleTypeMotionCensure            String?
  /// Code unique pour traitement automatisé de la décision concernant une motion ou décision de recevabilité par le bureau (par exemple: irrecevable, Motion rejeté(e)).
  famCodeDecision                     String?
  /// Signification du code de la décision.
  libelleDecision                     String?
  /// Les motifs de la décision concernant une motion ou la recevabilité par le bureau.
  formuleDecision                     String?
  /// Identifiant unique de la loi promulguée.
  codeLoiRefUid                       String?
  /// Date de publication du texte promulgué au journal officiel.
  dateJo                              String?
  /// Numéro du journal officiel.
  numJo                               String?
  /// Numéro NOR attribué au texte promulgué.
  referenceNor                        String?
  typeJo                              String?
  /// URL du texte promulgué sur le site https://www.legifrance.gouv.fr/
  urlLegifrance                       String?
  /// Titre du projet de loi promulgué.
  titreLoi                            String?
  /// URL vers l’échéancier d’application de la loi sur le site du legifrance.gouv.fr (rarement renseigné).
  urlEcheancierLoi                    String?
  /// Date de fermeture des contributions.
  dateFermetureContributionInternaute String?
  /// Date d'ouverture des contributions.
  dateOuvertureContributionInternaute String?
  /// Date de la publication du Journal officiel de l'Union européenne.
  dateJoce                            String?
  /// Référence du Journal officiel de l'Union européenne, de la forme L suivit d'un numéro.
  refJoce                             String?
  /// Titre du texte publié dans un numéro du Journal officiel de l'Union européenne.
  titreTexteEuropeen                  String?
  /// Type du texte européen (par exemple: Règlement de la Commission).
  typeTexteEuropeen                   String?
  /// Identifiant unique de la réunion dans l'agenda.
  reunionRefUid                       String?
  /// Code unique pour traitement automatisé du statut de l'adoption.
  famCodeStatutAdoption               String?
  /// Signification du code de statut de l'adoption.
  libelleStatutAdoption               String?
  /// Identifiant unique (uid) d'un rapport.
  texteAdopteRefUid                   String?
  /// Identifiant unique (uid) d'un rapport.
  texteAssocieRefUid                  String?
  /// Code unique pour traitement automatisé du type de déclaration.
  famCodeStatutTypeDeclaration        String?
  /// Signification du code du type de déclaration.
  libelleStatutTypeDeclaration        String?
  dossierRefUid                       String?
  /// Identifiant unique de l'ordre du jour de la réunion dans l'agenda.
  pointOdjUid                         String?
  agendaRef                           Agenda?                    @relation(fields: [reunionRefUid], references: [uid])
  auteurMotionRef                     Acteur?                    @relation("ActeLegislatif_auteurMotion", fields: [auteurMotionRefUid], references: [uid])
  dossierRef                          Dossier?                   @relation(fields: [dossierRefUid], references: [uid])
  pointOdj                            PointOdj?                  @relation(fields: [pointOdjUid], references: [uid])
  auteursRefs                         AuteurMotion[]
  infoJoRect                          InfoJoRect[]
  initiateurActeLegislatif            InitiateurActeLegislatif[]
  rapporteurs                         Rapporteur[]
  scrutins                            Scrutin[]
  textesAssocies                      TexteAssocie[]
  voteRefs                            VoteActeLegislatif[]

  @@index([dataset])
  @@index([reunionRefUid])
  @@index([auteurMotionRefUid])
  @@index([dossierRefUid])
  @@index([pointOdjUid])
}

/// Acteur à l'initiative d'un dossier.
model InitiateurDossier {
  /// Identifiant unique.
  id            Int      @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset       Int
  /// Dossier référent.
  dossierRefUid String?
  /// Acteur référent.
  acteurRefUid  String?
  /// Mandat référent.
  mandatRefUid  String?
  acteurRef     Acteur?  @relation(fields: [acteurRefUid], references: [uid])
  dossierRef    Dossier? @relation(fields: [dossierRefUid], references: [uid])
  mandatRef     Mandat?  @relation(fields: [mandatRefUid], references: [uid])

  @@index([dataset])
  @@index([dossierRefUid])
  @@index([acteurRefUid])
  @@index([mandatRefUid])
}

/// Acteur auteur de la motion de censure ou de la motion référendaire.
model AuteurMotion {
  /// Identifiant unique.
  id                   Int             @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset              Int
  /// Identifiant unique (uid) de l'acteur auteur de la motion.
  auteurMotionRefUid   String?
  acteLegislatifRefUid String?
  acteLegislatifRef    ActeLegislatif? @relation(fields: [acteLegislatifRefUid], references: [uid])
  auteurMotionRef      Acteur?         @relation(fields: [auteurMotionRefUid], references: [uid])

  @@index([dataset])
  @@index([acteLegislatifRefUid])
  @@index([auteurMotionRefUid])
}

/// Informations relatives à la publication d'une lettre rectificative au journal officiel.
model InfoJoRect {
  /// Identifiant unique.
  id                   Int             @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset              Int
  /// Date de publication d'une lettre rectificative au journal officiel.
  dateJo               String?
  /// Numéro du journal officiel.
  numJo                String?
  /// Numéro NOR attribué à la lettre rectificative.
  referenceNor         String?
  typeJo               String?
  /// URL de la lettre rectificative sur le site https://www.legifrance.gouv.fr/
  urlLegifrance        String?
  acteLegislatifRefUid String?
  acteLegislatifRef    ActeLegislatif? @relation(fields: [acteLegislatifRefUid], references: [uid])

  @@index([dataset])
  @@index([acteLegislatifRefUid])
}

model InitiateurActeLegislatif {
  /// Identifiant unique.
  id                   Int             @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset              Int
  /// Identifiant unique (uid) de l'acteur.
  acteurRefUid         String?
  /// Identifiant unique (uid) du mandat.
  mandatRefUid         String?
  acteLegislatifRefUid String?
  acteLegislatifRef    ActeLegislatif? @relation(fields: [acteLegislatifRefUid], references: [uid])
  acteurRef            Acteur?         @relation(fields: [acteurRefUid], references: [uid])
  mandatRef            Mandat?         @relation(fields: [mandatRefUid], references: [uid])

  @@index([dataset])
  @@index([acteLegislatifRefUid])
  @@index([acteurRefUid])
  @@index([mandatRefUid])
}

model Rapporteur {
  /// Identifiant unique.
  id                   Int             @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset              Int
  /// Identifiant unique (uid) du rapporteur.
  acteurRefUid         String
  /// Identifiant unique (uid) de l'étude relative à un projet de loi de finance.
  etudePlfRefUid       String?
  /// Un 'rapporteur spécial' produit un rapport (texteAssocie débute par RAPP) ou une étude (texteAssocie débute par ETDR) alors qu'un 'rapporteur pour avis' produit un avis (texteAssocie débute par AVIS).
  typeRapporteur       String
  acteLegislatifRefUid String?
  acteLegislatifRef    ActeLegislatif? @relation(fields: [acteLegislatifRefUid], references: [uid])
  acteurRef            Acteur?         @relation(fields: [acteurRefUid], references: [uid])
  etudePlfRef          EtudePlf?       @relation(fields: [etudePlfRefUid], references: [uid])

  @@index([dataset])
  @@index([acteLegislatifRefUid])
  @@index([acteurRefUid])
  @@index([etudePlfRefUid])
}

model EtudePlf {
  /// Identifiant unique.
  uid                 String       @id
  /// Jeu de données de provenance (numéro de législature)
  dataset             Int
  /// Nom de la mission de l'état à laquelle se rapporte l'étude.
  libelleCourt        String?
  /// Des missions secondaires (ou partie de mission) peuvent subsdiviser une mission principale. Par exemple la mission principale Action extérieure de l'État peut contenir une partie de mission Tourisme qui dispose de son propre budget.
  missionParentRefUid String?
  /// Au premier niveau le type est toujours 'mission principale', au second niveau (c'est à dire inclus dans la liste **missions**) le type peut être 'mission secondaire' ou 'partie de mission'.
  typeMission         String?
  /// Identifiant unique (uid) de la commission qui réalise l'étude.
  organeRefUid        String?
  /// Identifiant unique (uid) du document.
  texteAssocieRefUid  String?
  dossierRefUid       String?
  documentUid         String?
  document            Document?    @relation(fields: [documentUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)
  dossierRef          Dossier?     @relation(fields: [dossierRefUid], references: [uid])
  missionParentRef    EtudePlf?    @relation("EtudePlf", fields: [missionParentRefUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)
  missionEnfantRef    EtudePlf[]   @relation("EtudePlf")
  organeRef           Organe?      @relation(fields: [organeRefUid], references: [uid])
  rapporteurs         Rapporteur[]

  @@index([dataset])
  @@index([organeRefUid])
  @@index([documentUid])
  @@index([dossierRefUid])
  @@index([missionParentRefUid])
}

model VoteActeLegislatif {
  /// Identifiant unique.
  id                   Int             @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset              Int
  voteRefUid           String?
  acteLegislatifRefUid String?
  acteLegislatifRef    ActeLegislatif? @relation(fields: [acteLegislatifRefUid], references: [uid])
  voteRef              Scrutin?        @relation(fields: [voteRefUid], references: [uid])

  @@index([dataset])
  @@index([acteLegislatifRefUid])
  @@index([voteRefUid])
}

model TexteAssocie {
  /// Identifiant unique.
  id                   Int             @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset              Int
  /// Identifiant unique du texte adopté.
  texteAssocieRefUid   String?
  /// BTA pour Bibard du Texte Adopté ou TAP pour Texte Adopté Provisoire.
  typeTexte            String?
  acteLegislatifRefUid String?
  acteLegislatifRef    ActeLegislatif? @relation(fields: [acteLegislatifRefUid], references: [uid])
  texteAssocieRef      Document?       @relation(fields: [texteAssocieRefUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)

  @@index([dataset])
  @@index([acteLegislatifRefUid])
  @@index([texteAssocieRefUid])
}

model DossierThemes {
  uid             String   @id
  dossierRefUid   String
  dossierRef      Dossier  @relation(fields: [dossierRefUid], references: [uid])
  labels          String[]
  source          String?
  version         String?
  prediction_data Json
}
