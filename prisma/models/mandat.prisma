/// Une personne physique peut être mandataire d'un mandat représentatif ou bien d'un mandat dit simple, comme par exemple être membre d'une commission. Un `mandat représentatif <https://fr.wikipedia.org/wiki/Mandat_repr%C3%A9sentatif>`__ est \"une forme de mandat politique qui possède la caractéristique d'être général, libre et non révocable\".
model Mandat {
  uid                      String                     @id
  /// Jeu de données de provenance (numéro de législature)
  dataset                  Int
  /// Identifiant de l'acteur qui détient le mandat
  acteurRefUid             String?
  /// Identifiant de l'organe référente
  organeRefUid             String?
  legislature              String?
  /// Chambre de provenance (AN, SN ou CG)
  chambre                  String?
  typeOrgane               String
  /// Vrai si le mandat est en cours
  actif                    Boolean?
  dateDebut                DateTime
  datePublication          DateTime?
  dateFin                  DateTime?
  preseance                String?
  nominPrincipale          String
  codeQualite              String?
  libQualite               String
  libQualiteSex            String?
  libelle                  String?
  causeMandat              String?
  refCirconscription       String?
  region                   String?
  regionType               String?
  departement              String?
  numDepartement           String?
  numCirco                 String?
  datePriseFonction        DateTime?
  premiereElection         String?
  causeFin                 String?
  placeHemicycle           String?
  xsiType                  String?
  mandatRemplaceRefUid     String?                    @unique
  missionPrecedenteRefUid  String?                    @unique
  vecteurRecherche         Unsupported("tsvector")?   @default(dbgenerated("to_tsvector('french'::regconfig, ((immutable_unaccent((COALESCE(libelle, ''::text))::character varying) || ' '::text) || immutable_unaccent((COALESCE(\"libQualite\", ''::text))::character varying)))"))
  organeRef                Organe?                    @relation(fields: [organeRefUid], references: [uid])
  collaborateurs           Collaborateur[]
  initiateurActeLegislatif InitiateurActeLegislatif[]
  dossiers                 InitiateurDossier[]
  acteurRef                Acteur?                    @relation("Mandat_Acteur", fields: [acteurRefUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)
  acteurPrincipal          Acteur?                    @relation("Acteur_MandatPrincipal")
  mandatRemplaceRef        Mandat?                    @relation("MandatRemplace", fields: [mandatRemplaceRefUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)
  mandatRemplacementRef    Mandat?                    @relation("MandatRemplace")
  missionPrecedenteRef     Mandat?                    @relation("MissionSequence", fields: [missionPrecedenteRefUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)
  missionSuivanteRef       Mandat?                    @relation("MissionSequence")
  questions                Question[]
  interventions            Paragraphe[]
  suppleantRef             Suppleant?
  votes                    Vote[]

  @@index([dataset])
  @@index([vecteurRecherche], type: Gin)
  @@index([acteurRefUid])
  @@index([organeRefUid])
}

model Collaborateur {
  id               Int                      @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset          Int
  qualite          String
  nom              String
  prenom           String
  mandatRefUid     String
  acteurRefUid     String
  vecteurRecherche Unsupported("tsvector")? @default(dbgenerated("to_tsvector('french'::regconfig, ((immutable_unaccent((COALESCE(nom, ''::text))::character varying) || ' '::text) || immutable_unaccent((COALESCE(prenom, ''::text))::character varying)))"))
  mandatRef        Mandat                   @relation(fields: [mandatRefUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)
  acteurRef        Acteur                   @relation(fields: [acteurRefUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)

  @@index([dataset])
  @@index([vecteurRecherche], type: Gin)
  @@index([mandatRefUid])
  @@index([acteurRefUid])
}

model Suppleant {
  id           Int       @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset      Int
  dateDebut    DateTime
  dateFin      DateTime?
  acteurRefUid String
  mandatRefUid String    @unique
  acteurRef    Acteur    @relation(fields: [acteurRefUid], references: [uid], onDelete: Cascade)
  mandatRef    Mandat    @relation(fields: [mandatRefUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)

  @@index([dataset])
  @@index([acteurRefUid])
  @@index([mandatRefUid])
}
