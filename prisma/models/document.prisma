model Document {
  /// Identifiant unique du document.
  uid                      String                       @id
  dateMaj                  DateTime                     @default(now()) @updatedAt
  /// Jeu de données de provenance (numéro de législature)
  dataset                  Int
  /// Chambre parente du document (AN, SN, ou CG)
  chambre                  String?
  /// Numéro de `la législature <https://fr.wikipedia.org/wiki/Liste_des_l%C3%A9gislatures_fran%C3%A7aises>`__ sous laquelle a été créé le dossier. Nombre entier.
  legislature              String?
  /// Titre du document. Dans le cas d'un projet ou d'une proposition de loi, tel qu'il apparait au début du texte de loi.
  titrePrincipal           String
  /// Version abrégée du titre du document. Dans le cas d'un projet ou d'une proposition de loi il peut être ambigu.
  titrePrincipalCourt      String
  /// Code unique pour traitement automatisé.
  classeCode               String
  /// Signification du code.
  classeLibelle            String
  /// True si le document est un projet ou une proposition de loi.
  texteLoi                 Boolean?
  /// Code unique pour traitement automatisé.
  depotCode                String
  /// Signification du code.
  depotLibelle             String
  /// Code unique pour traitement automatisé.
  especeCode               String?
  /// Signification du code.
  especeLibelle            String?
  typeCode                 String?
  typeLibelle              String?
  sousTypeCode             String?
  sousTypeLibelle          String?
  sousTypeLibelleEdition   String?
  statutAdoption           String?
  niveauCorrection         String?
  typeCorrection           String?
  /// Date de création du document.
  dateCreation             DateTime?                    @db.Date
  /// Toujours identique à la date de création.
  dateDepot                DateTime?                    @db.Date
  /// Le contenu de ce champ n'est pas défini.
  datePublication          DateTime?                    @db.Date
  /// Date de première publication sur http://assemblee-nationale.fr.
  datePublicationWeb       DateTime?                    @db.Date
  /// Le contenu de ce champ n'est pas défini.
  denominationStructurelle String
  /// Détermine si le texte est susceptible d'être amendé lors d'une séance publique. Vaut true si le texte peut être amendé, false sinon.
  amendable                Boolean?
  /// Le contenu de ce champ n'est pas défini.
  dian                     String?
  /// Le numéro ISBN du document imprimé (habituellement null).
  isbn                     String?
  /// Nombre de pages du document imprimé.
  nbPage                   String?
  /// Le prix en euros d'un exemplaire papier du document à `la boutique de l'assemblée nationale.
  prix                     String?
  /// Un document est dit conforme `lorsqu'il est adopté sans modification par les deux assemblées <http://www2.assemblee-nationale.fr/decouvrir-l-assemblee/role-et-pouvoirs-de-l-assemblee-nationale/les-fonctions-de-l-assemblee-nationale/les-fonctions-legislatives/la-procedure-legislative>`.
  adoptionConforme         Boolean
  /// Le contenu de ce champ n'est pas défini.
  formule                  String?
  /// Numéro de bibard du document, c'est à dire les quatre derniers chiffres de l'identifiant unique (uid).
  numNotice                String?
  /// Le contenu de ce champ n'est pas défini.
  provenance               String?
  /// L'exposé des motifs du document au format HTML (si présent).
  exposeMotifsHtml         String?
  /// L'exposé des motifs du document au format texte (si présent).
  exposeMotifsTexte        String?
  /// URL of the PDF of this document.
  pdfUrl                   String?
  xsiType                  String
  /// Identifiant de l'auteur principal du document
  auteurPrincipalUid       String?
  documentParentRefUid     String?                      @unique
  /// Identifiant du dossier législatif lié
  dossierRefUid            String?
  /// Identifiant de l'organe référent ou de l'organe auteur
  organeRefUid             String?
  vecteurRecherche         Unsupported("tsvector")?     @default(dbgenerated("to_tsvector('french'::regconfig, ((immutable_unaccent((COALESCE(\"titrePrincipalCourt\", ''::text))::character varying) || ' '::text) || immutable_unaccent((COALESCE(\"numNotice\", ''::text))::character varying)))"))
  embedding                Unsupported("vector(1536)")?
  auteurPrincipal          Acteur?                      @relation(fields: [auteurPrincipalUid], references: [uid])
  dossierRef               Dossier?                     @relation(fields: [dossierRefUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)
  organeRef                Organe?                      @relation(fields: [organeRefUid], references: [uid])
  documentParentRef        Document?                    @relation("DocumentParentRef", fields: [documentParentRefUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)
  sousDocuments            Document?                    @relation("DocumentParentRef")
  scrutins                 Scrutin[]
  /// Amendements liés au document
  amendements              Amendement[]
  /// Organes qui peuvent amender le document
  dossierDepotRef          Dossier[]                    @relation("DocumentDepose")
  organesAmendements       OrganeDocumentAmendement[]
  actesLegislatifs         ActeLegislatif[]
  auteurs                  AuteurDocument[]
  coSignataires            CoSignataireDocument[]
  etudesPlf                EtudePlf[]
  interventions            Paragraphe[]
  subdivisions             Subdivision[]
  alineas                  Alinea[]

  @@index([dataset])
  @@index([vecteurRecherche], type: Gin)
  @@index([auteurPrincipalUid])
  @@index([dossierRefUid])
  @@index([organeRefUid])
  @@index([documentParentRefUid])
  @@index([dateCreation])
  @@index([embedding])
}

model AuteurDocument {
  /// Identifiant unique.
  id             Int      @id @default(autoincrement())
  dateMaj        DateTime @default(now()) @updatedAt
  /// Jeu de données de provenance (numéro de législature)
  dataset        Int
  /// Identifiant unique (uid) de l'organe correspondant au groupe politique.
  organeRefUid   String?
  /// Identifiant unique (uid) de l'acteur.
  acteurRefUid   String?
  /// Titre donné en raison du mandat, similaire à **libQualiteSex** dans le mandat de l'auteur.
  qualite        String?
  /// Identifiant unique (uid) du document.
  documentRefUid String?

  acteurRef   Acteur?   @relation(fields: [acteurRefUid], references: [uid])
  documentRef Document? @relation(fields: [documentRefUid], references: [uid])
  organeRef   Organe?   @relation(fields: [organeRefUid], references: [uid])

  @@index([dataset])
  @@index([organeRefUid])
  @@index([acteurRefUid])
  @@index([documentRefUid])
}

model CoSignataireDocument {
  /// Identifiant unique.
  id                     Int       @id @default(autoincrement())
  dateMaj                DateTime  @default(now()) @updatedAt
  /// Jeu de données de provenance (numéro de législature)
  dataset                Int
  /// Identifiant unique (uid) de l'acteur.
  acteurRefUid           String?
  /// Date de la co-signature.
  dateCosignature        DateTime?
  /// Date du retrait de la co-signature.
  dateRetraitCosignature DateTime?
  /// Le contenu de ce champ n'est pas défini.
  edite                  Boolean
  /// Identifiant unique (uid) de l'organe correspondant au groupe politique.
  organeRefUid           String?
  /// Le co-signataire engage aussi les députés apparentés au groupe politique au sein duquel il exerce son mandat.
  etApparentes           Boolean?
  /// Identifiant unique (uid) du document.
  documentRefUid         String?

  acteurRef   Acteur?   @relation(fields: [acteurRefUid], references: [uid])
  documentRef Document? @relation(fields: [documentRefUid], references: [uid])
  organeRef   Organe?   @relation(fields: [organeRefUid], references: [uid])

  @@index([dataset])
  @@index([organeRefUid])
  @@index([acteurRefUid])
  @@index([documentRefUid])
}

/// Un organe qui peut amender un document
model OrganeDocumentAmendement {
  /// Identifiant unique.
  id             Int       @id @default(autoincrement())
  dateMaj        DateTime  @default(now()) @updatedAt
  /// Jeu de données de provenance (numéro de législature)
  dataset        Int
  /// Toujours égal à true.
  amendable      Boolean?
  /// Identifiant unique (uid) de l'organe
  organeRefUid   String?
  /// Identifiant unique (uid) du document.
  documentRefUid String?
  documentRef    Document? @relation(fields: [documentRefUid], references: [uid])
  organeRef      Organe?   @relation(fields: [organeRefUid], references: [uid])

  @@index([dataset])
  @@index([organeRefUid])
  @@index([documentRefUid])
}

model Subdivision {
  /// Identifiant unique.
  hash              String  @id
  /// Jeu de données de provenance (numéro de législature)
  dataset           Int
  /// Identifiant unique (uid) du document.
  documentRefUid    String?
  /// Type de division.
  type              String?
  /// Identifiant de la division.
  identifiant       String?
  /// Titre de la division.
  titre             String?
  /// Sous-titre de la division.
  sousTitre         String?
  /// Titre de la division en format HTML.
  titreHtml         String?
  /// Sous-titre de la division en format HTML.
  sousTitreHtml     String?
  /// Identifiant de la division parente.
  parent            String?
  /// Niveau de la subdivision
  niveau            Int?
  /// Ordre de la division dans le document.
  sequence          Int?
  /// Le nombre d'amendements liés à cette subdivision.
  nombreAmendements Int     @default(0)

  embedding   Unsupported("vector(1536)")?
  documentRef Document?                    @relation(fields: [documentRefUid], references: [uid])
  alineas     Alinea[]
  scrutins    Scrutin[]
  /// Amendements liés à cette subdivision.
  amendements Amendement[]

  @@index([dataset])
  @@index([documentRefUid])
  @@index([embedding])
}

enum SubdivisionType {
  Tome
  Partie
  Livre
  Titre
  SousTitre
  Chapitre
  Section
  SousSection
  Paragraphe
  Article
  ExposeMotifs
  Annexe
}

/// Alinéa d'un texte de loi.
model Alinea {
  /// Id unique d'un alinéa.
  id                   Int                      @id @default(autoincrement())
  /// Numéro de l'alinéa.
  numero               Int
  /// Jeu de données de provenance (numéro de législature)
  dataset              Int
  /// Titre de la subdivision associée
  titreSubdivision     String?
  /// Sous-titre de la subdivision associée
  sousTitreSubdivision String?
  /// Texte de l'alinéa.
  texte                String?
  /// Html de l'alinéa.
  html                 String?
  /// Identifiant (string) de référence de l'article parent.
  articleRefHash       String
  /// Référence de l'article parent.
  articleRef           Subdivision              @relation(fields: [articleRefHash], references: [hash])
  /// Identifiant unique (uid) du document.
  documentRefUid       String?
  /// Identifiant unique du dossier lié au document s'il s'agit du document initial
  dossierRefUid        String?
  documentRef          Document?                @relation(fields: [documentRefUid], references: [uid])
  dossierRef           Dossier?                 @relation(fields: [dossierRefUid], references: [uid])
  vecteurRecherche     Unsupported("tsvector")? @default(dbgenerated("to_tsvector('french'::regconfig, ((((immutable_unaccent((COALESCE(\"titreSubdivision\", ''::text))::character varying) || ' '::text) || immutable_unaccent((COALESCE(\"sousTitreSubdivision\", ''::text))::character varying)) || ' '::text) || immutable_unaccent((COALESCE(texte, ''::text))::character varying)))"))

  @@index([dataset])
  @@index([articleRefHash])
  @@index([documentRefUid])
  @@index([dossierRefUid])
  @@index([vecteurRecherche], type: Gin)
}
