model Document {
  /// Jeu de données de provenance (numéro de législature)
  dataset                  Int
  /// Chambre parente du document (AN, SN, ou CG)
  chambre                  String?
  /// Titre du document. Dans le cas d'un projet ou d'une proposition de loi, tel qu'il apparait au début du texte de loi.
  titrePrincipal           String
  /// Version abrégée du titre du document. Dans le cas d'un projet ou d'une proposition de loi il peut être ambigu.
  titrePrincipalCourt      String
  /// Identifiant unique du document.
  uid                      String                   @id
  /// Code unique pour traitement automatisé.
  classeCode               String
  /// Signification du code.
  classeLibelle            String
  /// True si le document est un projet ou une proposition de loi.
  texteLoi                 Boolean?
  /// Code unique pour traitement automatisé.
  depotCode                String
  /// Signification du code.
  depotLibelle             String
  /// Code unique pour traitement automatisé.
  especeCode               String?
  /// Signification du code.
  especeLibelle            String?
  typeCode                 String?
  typeLibelle              String?
  sousTypeCode             String?
  sousTypeLibelle          String?
  sousTypeLibelleEdition   String?
  statutAdoption           String?
  niveauCorrection         String?
  typeCorrection           String?
  /// Date de création du document.
  dateCreation             DateTime?
  /// Toujours identique à la date de création.
  dateDepot                DateTime?
  /// Le contenu de ce champ n'est pas défini.
  datePublication          DateTime?
  /// Date de première publication sur http://assemblee-nationale.fr.
  datePublicationWeb       DateTime?
  /// Le contenu de ce champ n'est pas défini.
  denominationStructurelle String
  /// Détermine si le texte est susceptible d'être amendé lors d'une séance publique. Vaut true si le texte peut être amendé, false sinon.
  amendable                Boolean?
  /// Le contenu de ce champ n'est pas défini.
  dian                     String?
  /// Le numéro ISBN du document imprimé (habituellement null).
  isbn                     String?
  /// Nombre de pages du document imprimé.
  nbPage                   String?
  /// Le prix en euros d'un exemplaire papier du document à `la boutique de l'assemblée nationale.
  prix                     String?
  /// Numéro de `la législature <https://fr.wikipedia.org/wiki/Liste_des_l%C3%A9gislatures_fran%C3%A7aises>`__ sous laquelle a été créé le dossier. Nombre entier.
  legislature              String?
  /// Un document est dit conforme `lorsqu'il est adopté sans modification par les deux assemblées <http://www2.assemblee-nationale.fr/decouvrir-l-assemblee/role-et-pouvoirs-de-l-assemblee-nationale/les-fonctions-de-l-assemblee-nationale/les-fonctions-legislatives/la-procedure-legislative>`.
  adoptionConforme         Boolean
  /// Le contenu de ce champ n'est pas défini.
  formule                  String?
  /// Numéro de bibard du document, c'est à dire les quatre derniers chiffres de l'identifiant unique (uid).
  numNotice                String?
  /// Le contenu de ce champ n'est pas défini.
  provenance               String?
  /// URL of the PDF of this document.
  pdfUrl                   String?
  xsiType                  String
  /// Identifiant de l'auteur principal du document
  auteurPrincipalUid       String?
  documentParentRefUid     String?                  @unique
  /// Identifiant du dossier législatif lié
  dossierRefUid            String?
  /// Identifiant de l'organe référent ou de l'organe auteur
  organeRefUid             String?
  vecteurRecherche         Unsupported("tsvector")? @default(dbgenerated("to_tsvector('french'::regconfig, ((immutable_unaccent((COALESCE(\"titrePrincipalCourt\", ''::text))::character varying) || ' '::text) || immutable_unaccent((COALESCE(\"numNotice\", ''::text))::character varying)))"))
  auteurPrincipal          Acteur?                  @relation(fields: [auteurPrincipalUid], references: [uid])
  dossierRef               Dossier?                 @relation(fields: [dossierRefUid], references: [uid])
  organeRef                Organe?                  @relation(fields: [organeRefUid], references: [uid])
  documentParentRef        Document?                @relation("DocumentParentRef", fields: [documentParentRefUid], references: [uid], onDelete: Restrict, onUpdate: Restrict)
  sousDocuments            Document?                @relation("DocumentParentRef")
  amendements              Amendement[]
  amendementsCommission    AmendementCommission[]
  auteurs                  Auteur[]
  coSignataires            CoSignataireDocument[]
  etudesPlf                EtudePlf[]
  textesAssocies           TexteAssocie[]
  interventions            Paragraphe[]

  @@index([dataset])
  @@index([vecteurRecherche], type: Gin)
  @@index([auteurPrincipalUid])
  @@index([dossierRefUid])
  @@index([organeRefUid])
  @@index([documentParentRefUid])
  @@index([dateCreation])
}

model Auteur {
  /// Identifiant unique.
  id             Int     @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset        Int
  /// Identifiant unique (uid) de l'organe correspondant au groupe politique.
  organeRefUid   String?
  /// Identifiant unique (uid) de l'acteur.
  acteurRefUid   String?
  /// Titre donné en raison du mandat, similaire à **libQualiteSex** dans le mandat de l'auteur.
  qualite        String?
  /// Identifiant unique (uid) du document.
  documentRefUid String?

  acteurRef   Acteur?   @relation(fields: [acteurRefUid], references: [uid])
  documentRef Document? @relation(fields: [documentRefUid], references: [uid])
  organeRef   Organe?   @relation(fields: [organeRefUid], references: [uid])

  @@index([dataset])
  @@index([organeRefUid])
  @@index([acteurRefUid])
  @@index([documentRefUid])
}

model CoSignataireDocument {
  /// Identifiant unique.
  id                     Int       @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset                Int
  /// Identifiant unique (uid) de l'acteur.
  acteurRefUid           String?
  /// Date de la co-signature.
  dateCosignature        DateTime?
  /// Date du retrait de la co-signature.
  dateRetraitCosignature DateTime?
  /// Le contenu de ce champ n'est pas défini.
  edite                  Boolean
  /// Identifiant unique (uid) de l'organe correspondant au groupe politique.
  organeRefUid           String?
  /// Le co-signataire engage aussi les députés apparentés au groupe politique au sein duquel il exerce son mandat.
  etApparentes           Boolean?
  /// Identifiant unique (uid) du document.
  documentRefUid         String?

  acteurRef   Acteur?   @relation(fields: [acteurRefUid], references: [uid])
  documentRef Document? @relation(fields: [documentRefUid], references: [uid])
  organeRef   Organe?   @relation(fields: [organeRefUid], references: [uid])

  @@index([dataset])
  @@index([organeRefUid])
  @@index([acteurRefUid])
  @@index([documentRefUid])
}

model AmendementCommission {
  /// Identifiant unique.
  id             Int       @id @default(autoincrement())
  /// Jeu de données de provenance (numéro de législature)
  dataset        Int
  /// Identifiant unique (uid) de l'organe correspondant au groupe politique.
  organeRefUid   String?
  /// Toujours égal à true.
  amendable      Boolean?
  /// Identifiant unique (uid) du document.
  documentRefUid String?
  documentRef    Document? @relation(fields: [documentRefUid], references: [uid])
  organeRef      Organe?   @relation(fields: [organeRefUid], references: [uid])

  @@index([dataset])
  @@index([organeRefUid])
  @@index([documentRefUid])
}
